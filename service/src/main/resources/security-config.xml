<?xml version="1.0" encoding="UTF-8"?>
<!--
    Copyright 2016 General Electric Company. 
   
    Licensed under the Apache License, Version 2.0 (the "License"); 
    you may not use this file except in compliance with the License. 
    You may obtain a copy of the License at
   
    http://www.apache.org/licenses/LICENSE-2.0
   
    Unless required by applicable law or agreed to in writing, software 
    distributed under the License is distributed on an "AS IS" BASIS, 
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
    See the License for the specific language governing permissions and 
    limitations under the License.
 -->

<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xmlns:oauth="http://www.springframework.org/schema/security/oauth2"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:redis="http://www.springframework.org/schema/redis"
    xmlns:sec="http://www.springframework.org/schema/security"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
        http://www.springframework.org/schema/security/oauth2 http://www.springframework.org/schema/security/spring-security-oauth2.xsd">

    <!-- Register Oauth AuthN Manager -->
    <sec:authentication-manager />

    <import resource="classpath:META-INF/spring/tasks.xml"/>

    <bean
        class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping">
        <property name="order" value="-1"></property>
        <property name="urlPathHelper">
            <bean class="com.ge.predix.acs.config.UrlPathHelperNonDecoding"></bean>
        </property>
    </bean>

    <context:component-scan base-package="com.ge.predix.web.cors"/>

    <!-- Correlation Log Filter -->
    <bean id="logFilter" class="com.ge.predix.log.filter.LogFilter">
       <constructor-arg>
            <set value-type="java.lang.String">
                <value>${ACS_BASE_DOMAIN:localhost}</value>
            </set>
        </constructor-arg>
        <constructor-arg>
            <set value-type="java.lang.String">
                <value>Predix-Zone-Id</value>
                <value>ACS-Zone-Subdomain</value>
            </set>
        </constructor-arg>
        <constructor-arg value="acs" />
    </bean>

    <!-- Authentication Filter -->
    <bean id="preAuthenticationEntryPoint"
        class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint" />

    <!-- Filter for Oauth Token Validation -->
    <oauth:resource-server id="oauth2remoteTokenFilter"
        token-services-ref="tokenService" />
        
    <!-- Authorization Configuration For V1 policy-set APIS -->
    <http pattern="/v1/policy-set/**" request-matcher="ant" create-session="stateless"
        xmlns="http://www.springframework.org/schema/security"
        disable-url-rewriting="true" use-expressions="true"
        entry-point-ref="preAuthenticationEntryPoint">
        <csrf disabled="true"/>

        <intercept-url pattern="/v1/policy-set/**" method="GET"
            access="hasAnyAuthority('acs.policies.read') " />
        <intercept-url pattern="/v1/policy-set/**" method="HEAD"
            access="hasAnyAuthority('acs.policies.read') " />
        <intercept-url pattern="/v1/policy-set/**" method="OPTIONS"
            access="hasAnyAuthority('acs.policies.read') " />

        <intercept-url pattern="/v1/policy-set/**" method="PUT"
            access="hasAnyAuthority('acs.policies.write') " />
        <intercept-url pattern="/v1/policy-set/**" method="POST"
            access="hasAnyAuthority('acs.policies.write') " />
        <intercept-url pattern="/v1/policy-set/**" method="DELETE"
            access="hasAnyAuthority('acs.policies.write') " />
        <intercept-url pattern="/v1/policy-set/**" method="PATCH"
            access="hasAnyAuthority('acs.policies.write') " />

        <custom-filter ref="oauth2remoteTokenFilter"
            position="PRE_AUTH_FILTER" />
            
        <custom-filter ref="acsRequestEnrichingFilter"
                after="BASIC_AUTH_FILTER" />            
    </http>
    
    <!-- Authorization Configuration For V1 policy-evaluation APIS -->
    <http pattern="/v1/policy-evaluation/**" request-matcher="ant" create-session="stateless"
        xmlns="http://www.springframework.org/schema/security"
        disable-url-rewriting="true" use-expressions="true"
        entry-point-ref="preAuthenticationEntryPoint">
        <csrf disabled="true"/>

        <intercept-url pattern="/v1/policy-evaluation"
            access="isFullyAuthenticated() " />

        <custom-filter ref="oauth2remoteTokenFilter"
            position="PRE_AUTH_FILTER" />
            
        <custom-filter ref="acsRequestEnrichingFilter"
            after="BASIC_AUTH_FILTER" />
    </http>
    
    <!-- Authorization Configuration For V1 resource APIS -->
    <http pattern="/v1/resource/**" request-matcher="ant" create-session="stateless"
        xmlns="http://www.springframework.org/schema/security"
        disable-url-rewriting="true" use-expressions="true"
        entry-point-ref="preAuthenticationEntryPoint">
        <csrf disabled="true"/>

        <intercept-url pattern="/v1/resource/**" method="GET"
            access="hasAnyAuthority('acs.attributes.read') " />
        <intercept-url pattern="/v1/resource/**" method="HEAD"
            access="hasAnyAuthority('acs.attributes.read') " />
        <intercept-url pattern="/v1/resource/**" method="OPTIONS"
            access="hasAnyAuthority('acs.attributes.read') " />

        <intercept-url pattern="/v1/resource/**" method="PUT"
            access="hasAnyAuthority('acs.attributes.write') " />
        <intercept-url pattern="/v1/resource/**" method="POST"
            access="hasAnyAuthority('acs.attributes.write') " />
        <intercept-url pattern="/v1/resource/**" method="DELETE"
            access="hasAnyAuthority('acs.attributes.write') " />
        <intercept-url pattern="/v1/resource/**" method="PATCH"
            access="hasAnyAuthority('acs.attributes.write') "/> 

        <custom-filter ref="oauth2remoteTokenFilter"
            position="PRE_AUTH_FILTER" />
        <custom-filter ref="acsRequestEnrichingFilter"
                after="BASIC_AUTH_FILTER" />
    </http>
    
    <!-- Authorization Configuration For V1 subject APIS -->
    <http pattern="/v1/subject/**" request-matcher="ant" create-session="stateless"
        xmlns="http://www.springframework.org/schema/security"
        disable-url-rewriting="true" use-expressions="true"
        entry-point-ref="preAuthenticationEntryPoint">
        <csrf disabled="true"/>

        <intercept-url pattern="/v1/subject/**" method="GET"
            access="hasAnyAuthority('acs.attributes.read') " />
        <intercept-url pattern="/v1/subject/**" method="HEAD"
            access="hasAnyAuthority('acs.attributes.read') " />
        <intercept-url pattern="/v1/subject/**" method="OPTIONS"
            access="hasAnyAuthority('acs.attributes.read') " />

        <intercept-url pattern="/v1/subject/**" method="PUT"
            access="hasAnyAuthority('acs.attributes.write') " />
        <intercept-url pattern="/v1/subject/**" method="POST"
            access="hasAnyAuthority('acs.attributes.write') " />
        <intercept-url pattern="/v1/subject/**" method="DELETE"
            access="hasAnyAuthority('acs.attributes.write') " />
        <intercept-url pattern="/v1/subject/**" method="PATCH"
            access="hasAnyAuthority('acs.attributes.write') "/>

        <custom-filter ref="oauth2remoteTokenFilter"
            position="PRE_AUTH_FILTER" />
        <custom-filter ref="acsRequestEnrichingFilter"
                after="BASIC_AUTH_FILTER" />
    </http>
        
    <!-- Authorization Configuration For V1 APIS -->
    <http pattern="/v1/**" request-matcher="ant" create-session="stateless"
        xmlns="http://www.springframework.org/schema/security"
        disable-url-rewriting="true" use-expressions="true"
        entry-point-ref="preAuthenticationEntryPoint">
        <csrf disabled="true"/>

        <!-- ZacTokenService will only verify the token against defaultTrustedIssuerId 
            for requests with no zone. Additional scope acs.zones.admin needs to be asserted 
            here. -->
        <intercept-url pattern="/v1/zone/**"
            access="isFullyAuthenticated() and hasAnyAuthority('acs.zones.admin')" />

        <custom-filter ref="oauth2remoteTokenFilter"
            position="PRE_AUTH_FILTER" />
    </http>

    <bean id="uaaTemplate" class="org.springframework.web.client.RestTemplate" />

    <beans profile="public">
        <bean id="tokenService" class="com.ge.predix.uaa.token.lib.ZoneAwareFastTokenService">
            <property name="defaultFastTokenService" ref="defaultFastTokenService" />
            <property name="defaultZoneConfig" ref="defaultZoneConfig" />
            <property name="serviceBaseDomain" value="${ACS_BASE_DOMAIN:localhost}" />
            <property name="serviceId" value="${ACS_SERVICE_ID:predix-acs}" />
            <property name="serviceZoneHeaders" value="Predix-Zone-Id,ACS-Zone-Subdomain" />
        </bean>

        <bean id="defaultFastTokenService" class="com.ge.predix.uaa.token.lib.FastTokenServices">
            <property name="storeClaims" value="true" />
            <property name="trustedIssuers">
                <list value-type="java.lang.String">
                    <value>${TRUSTED_ISSUER_ID:${UAA_URL:http://localhost:8080/uaa}/oauth/token}</value>
                </list>
            </property>
            <property name="useHttps" value="${UAA_USE_HTTPS:false}" />
        </bean>

        <bean id="defaultZoneConfig" class="com.ge.predix.uaa.token.lib.DefaultZoneConfiguration">
            <property name="trustedIssuerId"
                value="${TRUSTED_ISSUER_ID:${UAA_URL:http://localhost:8080/uaa}/oauth/token}" />
            <property name="allowedUriPatterns">
                <list>
                    <value>/v1/zone/**</value>
                </list>
            </property>
        </bean>
    </beans>

    <beans profile="predix">
        <bean id="acsDefaultZoneConfig" class="com.ge.predix.uaa.token.lib.DefaultZoneConfiguration">
            <property name="trustedIssuerId" value="${ACS_DEFAULT_ISSUER_ID}" />
            <property name="allowedUriPatterns">
                <list>
                    <value>/v1/zone/**</value>
                </list>
            </property>
        </bean>

        <bean id="tokenService" class="com.ge.predix.uaa.token.lib.ZacTokenService">
            <property name="serviceId" value="${ACS_SERVICE_ID}" />
            <property name="zacUrl" value="${ZAC_URL}" />
            <property name="serviceZoneHeaders" value="Predix-Zone-Id,ACS-Zone-Subdomain" />
            <property name="defaultZoneConfig" ref="acsDefaultZoneConfig" />
            <property name="serviceBaseDomain" value="${ACS_BASE_DOMAIN}" />
            <property name="storeClaims" value="true" />
            <property name="oauth2RestTemplate" ref="zacRestTemplate" />
        </bean>

        <bean id="zacRestTemplate"
            class="org.springframework.security.oauth2.client.OAuth2RestTemplate">
            <constructor-arg>
                <bean
                    class="org.springframework.security.oauth2.client.token.grant.client.ClientCredentialsResourceDetails">
                    <property name="accessTokenUri"
                        value="${ZAC_UAA_TOKEN_URL:${ZAC_UAA_URL}/oauth/token}" />
                    <property name="clientId" value="${ZAC_CLIENT_ID}" />
                    <property name="clientSecret" value="${ZAC_CLIENT_SECRET}" />
                </bean>
            </constructor-arg>
        </bean>

        <!-- Nurego Metering Filter -->
        <import resource="classpath:META-INF/spring-metering-filter.xml" />
    </beans>
</beans>